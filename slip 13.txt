slip 13
1->
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
void make_toks(char *s, char *tok[])
{
    int i = 0;
    char *p;
    p = strtok(s, " ");
    while (p != NULL)
    {
        tok[i++] = p;
        p = strtok(NULL, " ");
    }
    tok[i] = NULL;
}
int main()
{
    char buff[80], *args[10];
    int pid;
    while (1)
    {
        printf("myshell$ ");
        fflush(stdin);
        fgets(buff, 80, stdin);
        buff[strlen(buff) - 1] = '\0';
        make_toks(buff, args);
        if (strcmp(args[0], "typeline") == 0)
        {
            if (args[1][0] == '+')
            {
                // Read the line count
                int n = atoi(args[1] + 1);
                // Open the file
                FILE *fp = fopen(args[2], "r");
                if (fp == NULL)
                {
                    printf("Error opening file %s.\n", args[2]);
                    return 1;
                }
                // Read and print the first n lines
                char line[80];
                int count = 0;
                while (count < n && fgets(line, 80, fp) != NULL)
                {
                    printf("%s", line);
                    count++;
                }
                // Close the file
                fclose(fp);
            }
            else if (strcmp(args[2], "-a") == 0)
            {
                // Open the file
                FILE *fp = fopen(args[2], "r");
                if (fp == NULL)
                {
                    printf("Error opening file %s.\n", args[2]);
                    return 1;
                }
                char line[80];
                while (fgets(line, 80, fp) != NULL)
                    printf("%s", line);
                fclose(fp);
            }
            else
            {
                printf("Invalid option.\n");
            }
        }
    }
}

2->
#include <stdio.h>
#include <string.h>
struct job
{
    char name[20];
    int at, bt, ct, tat, wt, st, tbt;
} job[10];
int n, i, j, tq;
float avg_tat = 0;
float avg_wt = 0;
// to accept the info about processes
take_input()
{
    printf("Enter the no of jobs : ");
    scanf("%d", &n);
    printf("Enter the time Quantum: ");
    scanf("%d", &tq);
    for (i = 0; i < n; i++)
    {
        printf("Enter the name of the job: ");
        scanf("%s", &job[i].name);
        printf("Enter the arrival time of the job : ");
        scanf("%d", &job[i].at);
        printf("Enter the burst time of the job: ");
        scanf("%d", &job[i].bt);
        job[i].tbt = job[i].bt;
        printf("\n\n");
    }
}

// to sort the processes by arriaval time
sort()
{
    struct job temp;
    for (i = 0; i < n; i++)
    {
        for (j = i + 1; j < n; j++)
        {
            if (job[i].at > job[j].at)
            {
                temp = job[i];
                job[i] = job[j];
                job[j] = temp;
            }
        }
    }
}
// to calculate the tat n wt
void process()
{
    int jno = 0, cnt = 0, time = job[0].at;
    printf("\n***********Gantt chart*********\n");
    while (1)
    {
        if (job[jno].tbt != 0)
        {
            printf("|%d %s ", time, job[jno].name);
            if (job[jno].tbt >= tq)
            {
                job[jno].tbt = job[jno].tbt - tq;
                time = time + tq;
            }
            else
            {
                time = time + job[jno].tbt;
                job[jno].tbt = 0;
            }
            printf("%d |", time);
            if (job[jno].tbt == 0)
            {
                job[jno].ct = time;
                job[jno].tat = time - job[jno].at;
                job[jno].wt = job[jno].tat - job[jno].bt;
                cnt++;
            }
        }
        jno++;
        if (jno == n)
        {
            jno = 0;
        }
        if (cnt == n)
            break;
    }
}
// to print the output table
void print_output()
{
    printf("\n\n");
    printf("\n---------------------------------------");
    printf("\n pname        at      bt      tat     wt ");
    printf("\n---------------------------------------");
    for (i = 0; i < n; i++)
    {
        printf("\n%s    %d      %d      %d      %d ", job[i].name, job[i].at, job[i].bt, job[i].tat, job[i].wt);
        avg_tat = avg_tat + (float)(job[i].tat);
        avg_wt = (float)avg_wt + (float)(job[i].wt);
    }
    printf("\n-----------------------------------------");
    printf("\nThe avg of the turn around time is %f", avg_tat / n);
    printf("\nThe avg of the waiting time is %f", avg_wt / n);
}
main()
{
    take_input();
    process();
    print_output();
    for (i = 0; i < n; i++)
    {
        job[i].tbt = job[i].bt = rand() % 10 + 1;
        job[i].at = job[i].ct + 2;
    }
    process();
    print_output();
}